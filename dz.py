from os import system
system('clear')


# a = lambda x: x *2
# print(a(5))

# b = lambda x: x ** 2
# print(b(5))

# c = lambda x, y: x + y
# print(c(5, 10))

# d = lambda x: x % 2 == 0
# print(d(5))

# e = lambda s: s[::-1]
# print(e('Привет'))

# f = lambda x: x > 0
# print(f(-2))

# g = lambda x, y: x - y
# print(g(10, 3))

# h = lambda s1, s2: s1 + s2
# print(h('Привет', ' мир'))

# i = lambda s: len(s)
# print(i('Привет'))

# j = lambda x, y: x % y
# print(j(10, 3))

# k = lambda s: s.upper()
# print(k('Привет'))

# l = lambda s: s[0]
# print(l('Привет'))

# m = lambda x, y: x % y == 0
# print(m(15, 4))

# o = lambda x, y: max((x, y))
# print(o(3, 7))

# p = list(map(lambda x: x * 2, [1,2,3]))
# print(p)

# q = lambda x: 1 if x == 0 else x * q(x - 1)
# print(q(5))

# r = lambda x: 0 if x == 0 else x + r(x - 1)
# print(r(3))

# s = lambda x, y, z: True if y <= x <= z else False
# print(s(15, 1, 10))

# t = lambda x, y: (x + y)/2
# print(t(4, 8))

# u = lambda x: (list(filter(lambda x: x % 2 == 0, x)), list(filter(lambda x: x % 2 != 0, x)))
# print(u([1,2,3,4]))

# v = lambda x: x.lower() == x[::-1].lower()
# print(v('шалаШ'))

# w = lambda x: len(list(filter(lambda x: x in "аеёиоуыэюяaeiou", x.lower())))
# print(w('Привет'))

# x = lambda x: list(filter(lambda y: y > 0, x))
# print(x([-1,2,-3,4]))

# y = lambda x: len(x.split(' '))
# print(y("Привет, как дела?"))

# z = lambda x, y: y in x
# print(z([1,2,3], 2))

# a2 = lambda x, y: list(map(lambda x, y: x * y, x, y))
# print(a2([1, 2, 3], [4, 5, 6]))

# b2 = lambda x: list(x)
# print(b2('Привет'))

# c2 = lambda x: ' '.join(x)
# print(c2(['Привет', 'мир']))

# d2 = lambda x: max(x)
# print(d2([1,2,3]))

# e2 = lambda x, y: len(list(filter(lambda x: x > y, x)))
# print(e2([1,2,3,4], 2))


# 1 уровень: Основы Python

# 1. Напиши программу "Hello World", которая выводит на экран приветствие.
# 2. Создай программу, которая запрашивает у пользователя его имя и возраст, 
# затем выводит их в формате "Привет, [Имя]! Тебе [Возраст] лет."
# 3. Напиши программу, которая проверяет, является ли введенное число четным или нечетным,
# и выводит соответствующее сообщение.
# 4. Создай программу, используя условные операторы if-else, которая определяет, 
# является ли введенное число положительным, отрицательным или нулем.
# 5. Напиши программу, которая принимает строку от пользователя и выводит ее в 
# обратном порядке.
# 6. Создай список чисел и напиши программу, которая выводит только четные числа 
# из этого списка.
# 7. Напиши программу, которая принимает два числа от пользователя и выводит их сумму.

# 2 уровень: Работа со списками и циклами

# 8. Создай программу, используя цикл for, которая выводит квадраты чисел от 1 до 10.
# 9. Напиши программу, которая принимает список чисел и выводит только те числа, 
# которые больше 5.
# 10. Создай список строк и напиши программу, которая выводит каждую строку, 
# длина которой больше 8 символов.
# 11. Напиши программу, используя цикл while, которая запрашивает у 
# пользователя числа до тех пор, пока он не введет отрицательное число.
# 12. Создай кортеж строк и напиши программу, 
# которая выводит строки в верхнем регистре.

# 3 уровень: Работа с множествами и словарями

# 13. Создай словарь, представляющий собой телефонную книгу (имя - номер). 
# Напиши программу, которая по имени выводит соответствующий номер.
# 14. Напиши программу, которая принимает два множества от пользователя и
# выводит их объединение.
  
# 4 уровень: Продвинутые задачи

# 15. Напиши программу, используя функции, которая вычисляет 
# факториал введенного числа.

# 5 уровень: Использование `kwargs` в Python

# 16. Создай функцию, которая принимает различные параметры (например, имя, возраст, город) с
#  использованием kwargs и выводит их в виде предложения. По умолчанию, установи значения по 
# умолчанию для некоторых параметров.

# 17. Напиши программу, которая принимает название товара и его цену с использованием kwargs,
#  добавляет этот товар в словарь корзины покупок и выводит общую сумму покупок.


# 6 уровень: Расширенная работа с функциями и словарями

# 20. Создай функцию manage_cities, которая позволяет пользователю управлять 
# своими городами. Функция должна предоставлять следующие возможности:

#    - Добавление нового пользователя с указанием его имени и города.
#    - Обновление города существующего пользователя.
#    - Удаление пользователя из списка.
#    - Вывод списка всех пользователей с их городами.
# def manage_cities(city_dict):
#     """
#     Реализация функции для управления городами пользователей.

#     Пользователь может:
#     1. Добавить нового пользователя.
#     2. Обновить город существующего пользователя.
#     3. Удалить пользователя из списка.
#     4. Вывести список всех пользователей с их городами.

#     :param city_dict: Словарь, представляющий города пользователей.
#     """
#     pass

# Эта функция должна взаимодействовать с пользователем, запрашивая необходимые данные 
# и выполняя соответствующие операции с словарем городов.


